From c1b4b1980252faceca128b03930d625593121d6d Mon Sep 17 00:00:00 2001
From: Ikey Doherty <michael.i.doherty@intel.com>
Date: Thu, 20 Apr 2017 17:07:21 +0100
Subject: [PATCH] daemon: Support stateless operating systems with split
 passwd/shadow

On certain operating systems, such as the Clear Linux Project for Intel
Architecture, the shadow/passwd configuration is stateless by default.
Thus, if the entries do not exist in the typical /etc/ files, we must
also look them up in the system records in /usr/share/defaults/etc,
for the users/groups defined by the stateless policy.

Signed-off-by: Ikey Doherty <michael.i.doherty@intel.com>
Signed-off-by: Patrick McCarty <patrick.mccarty@intel.com>
---
 src/daemon.c | 45 ++++++++++++++++++++++++++++-----------------
 1 file changed, 28 insertions(+), 17 deletions(-)

diff --git a/src/daemon.c b/src/daemon.c
index aa9d050bc2e9..37167ffdfee6 100644
--- a/src/daemon.c
+++ b/src/daemon.c
@@ -52,10 +52,15 @@
 #include "user.h"
 #include "accounts-user-generated.h"
 
-#define PATH_PASSWD "passwd"
-#define PATH_SHADOW "shadow"
+#define PATH_PASSWD "/etc/passwd"
+#define PATH_SHADOW "/etc/shadow"
 #define PATH_GROUP "/etc/group"
-#define PATH_DM     "/etc/systemd/system/display-manager.service"
+#define PATH_DM     "/usr/lib/systemd/system/display-manager.service"
+
+#define PATH_ALT_PASSWD "/usr/share/defaults/etc/passwd"
+#define PATH_ALT_SHADOW "/usr/share/defaults/etc/shadow"
+#define PATH_ALT_GROUP "/etc/group"
+
 
 enum
 {
@@ -94,6 +99,11 @@ typedef struct
         GFileMonitor    *dm_monitor;
         GFileMonitor    *wtmp_monitor;
 
+        GFileMonitor *alt_passwd_monitor;
+        GFileMonitor *alt_shadow_monitor;
+        GFileMonitor *alt_group_monitor;
+
+
         GQueue          *pending_list_cached_users;
 
         UserReloadType   reload_type;
@@ -109,7 +119,7 @@ typedef struct passwd * (* EntryGeneratorFunc) (Daemon *,
                                                 GHashTable *,
                                                 GHashTable *,
                                                 gpointer *,
-                                                struct spwd **shadow_entry);
+                                                struct spwd **shadow_entry, const gchar *pwfile, const gchar *shadow_file);
 
 typedef struct
 {
@@ -220,7 +230,7 @@ entry_generator_fgetpwent (Daemon       *daemon,
                            GHashTable   *users,
                            GHashTable   *local_users,
                            gpointer     *state,
-                           struct spwd **spent)
+                           struct spwd **spent, const gchar *pwfile, const gchar *shadow_file)
 {
         struct passwd *pwent;
 
@@ -248,7 +258,7 @@ entry_generator_fgetpwent (Daemon       *daemon,
                 FILE *fp;
                 struct spwd *shadow_entry;
 
-                shadow_path = g_build_filename (get_sysconfdir (), PATH_SHADOW, NULL);
+                shadow_path = g_build_filename (shadow_file, NULL);
                 fp = fopen (shadow_path, "r");
                 if (fp == NULL) {
                         g_warning ("Unable to open %s: %s", shadow_path, g_strerror (errno));
@@ -282,7 +292,7 @@ entry_generator_fgetpwent (Daemon       *daemon,
                         return NULL;
                 }
 
-                passwd_path = g_build_filename (get_sysconfdir (), PATH_PASSWD, NULL);
+                passwd_path = g_build_filename (pwfile, NULL);
                 fp = fopen (passwd_path, "r");
                 if (fp == NULL) {
                         g_clear_pointer (&shadow_users, g_hash_table_unref);
@@ -313,7 +323,7 @@ entry_generator_fgetpwent (Daemon       *daemon,
                         if (!user_classify_is_human (pwent->pw_uid, pwent->pw_name, pwent->pw_shell)) {
                                 g_debug ("skipping user: %s", pwent->pw_name);
 
-                                return entry_generator_fgetpwent (daemon, users, local_users, state, spent);
+                                return entry_generator_fgetpwent (daemon, users, local_users, state, spent, pwfile, shadow_file);
                         }
 
                         return pwent;
@@ -333,7 +343,7 @@ entry_generator_cachedir (Daemon       *daemon,
                           GHashTable   *users,
                           GHashTable   *local_users,
                           gpointer     *state,
-                          struct spwd **shadow_entry)
+                          struct spwd **shadow_entry, const gchar *pwfile, const gchar *shadow_file)
 {
         struct passwd *pwent;
 
@@ -419,7 +429,7 @@ entry_generator_requested_users (Daemon       *daemon,
                                  GHashTable   *users,
                                  GHashTable   *local_users,
                                  gpointer     *state,
-                                 struct spwd **shadow_entry)
+                                 struct spwd **shadow_entry, const gchar *pwfile, const gchar *shadow_file)
 {
         DaemonPrivate *priv = daemon_get_instance_private (daemon);
         struct passwd *pwent;
@@ -466,7 +476,7 @@ load_entries (Daemon            *daemon,
               GHashTable        *users,
               GHashTable        *local_users,
               gboolean           explicitly_requested,
-              EntryGeneratorFunc entry_generator)
+              EntryGeneratorFunc entry_generator, const gchar *pwfile, const gchar *shadow_file)
 {
         DaemonPrivate *priv = daemon_get_instance_private (daemon);
         gpointer generator_state = NULL;
@@ -478,7 +488,7 @@ load_entries (Daemon            *daemon,
 
         for (;;) {
                 spent = NULL;
-                pwent = entry_generator (daemon, users, local_users, &generator_state, &spent);
+                pwent = entry_generator (daemon, users, local_users, &generator_state, &spent, pwfile, shadow_file);
                 if (pwent == NULL)
                         break;
 
@@ -558,13 +568,14 @@ reload_users (Daemon *daemon)
          */
 
         /* Load the local users into our hash tables */
-        load_entries (daemon, users, local_users, FALSE, entry_generator_fgetpwent);
+        load_entries (daemon, users, local_users, FALSE, entry_generator_fgetpwent, PATH_PASSWD, PATH_SHADOW);
+        load_entries (daemon, users, local_users, FALSE, entry_generator_fgetpwent, PATH_ALT_PASSWD, PATH_ALT_SHADOW);
 
         /* Now add/update users from other sources, possibly non-local */
-        load_entries (daemon, users, local_users, TRUE, entry_generator_cachedir);
+        load_entries (daemon, users, local_users, TRUE, entry_generator_cachedir, NULL, NULL);
 
         /* and add users to hash table that were explicitly requested  */
-        load_entries (daemon, users, local_users, TRUE, entry_generator_requested_users);
+        load_entries (daemon, users, local_users, TRUE, entry_generator_requested_users, NULL, NULL);
 
         wtmp_helper_update_login_frequencies (users);
 
@@ -851,11 +862,11 @@ daemon_init (Daemon *daemon)
 
         priv->pending_list_cached_users = g_queue_new ();
 
-        passwd_path = g_build_filename (get_sysconfdir (), PATH_PASSWD, NULL);
+        passwd_path = g_build_filename (PATH_PASSWD, NULL);
         priv->passwd_monitor = setup_monitor (daemon,
                                               passwd_path,
                                               on_users_monitor_changed);
-        shadow_path = g_build_filename (get_sysconfdir (), PATH_SHADOW, NULL);
+        shadow_path = g_build_filename (PATH_SHADOW, NULL);
         priv->shadow_monitor = setup_monitor (daemon,
                                               shadow_path,
                                               on_users_monitor_changed);
-- 
2.42.0

